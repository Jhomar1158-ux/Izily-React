[{"D:\\Users\\JGU\\Desktop\\PROYECTOS\\izily_test\\src\\index.js":"1","D:\\Users\\JGU\\Desktop\\PROYECTOS\\izily_test\\src\\reportWebVitals.js":"2","D:\\Users\\JGU\\Desktop\\PROYECTOS\\izily_test\\src\\firebase.js":"3","D:\\Users\\JGU\\Desktop\\PROYECTOS\\izily_test\\src\\App.js":"4","D:\\Users\\JGU\\Desktop\\PROYECTOS\\izily_test\\src\\components\\Cards.js":"5","D:\\Users\\JGU\\Desktop\\PROYECTOS\\izily_test\\src\\containers\\Profesores.js":"6","D:\\Users\\JGU\\Desktop\\PROYECTOS\\izily_test\\src\\components\\Profesor.js":"7"},{"size":499,"mtime":1611974779333,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1611960599195,"results":"10","hashOfConfig":"9"},{"size":476,"mtime":1611974934409,"results":"11","hashOfConfig":"9"},{"size":481,"mtime":1612149247418,"results":"12","hashOfConfig":"9"},{"size":791,"mtime":1612033344941,"results":"13","hashOfConfig":"9"},{"size":10862,"mtime":1612306663982,"results":"14","hashOfConfig":"9"},{"size":2055,"mtime":1612233502094,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"tamvwd",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"18"},"D:\\Users\\JGU\\Desktop\\PROYECTOS\\izily_test\\src\\index.js",[],["34","35"],"D:\\Users\\JGU\\Desktop\\PROYECTOS\\izily_test\\src\\reportWebVitals.js",[],"D:\\Users\\JGU\\Desktop\\PROYECTOS\\izily_test\\src\\firebase.js",[],"D:\\Users\\JGU\\Desktop\\PROYECTOS\\izily_test\\src\\App.js",["36"],"import \"./App.css\";\r\n\r\nimport Cards from \"./components/Cards\";\r\nimport Profesores from \"./containers/Profesores\";\r\n\r\n\r\n//Página general donde se carga el componente \"profesores\"\r\n\r\nfunction App() {\r\n\r\n  // Esto no sirve //\r\n\r\n  // return (\r\n  //   <div>\r\n  //     <div className=\"tittle\">Profesores</div>\r\n  //     <div className=\"container\">\r\n  //       <Cards />\r\n  //     </div>\r\n  //   </div>\r\n  // );\r\n\r\n    return (\r\n        <Profesores />\r\n    )\r\n}\r\n\r\nexport default App;\r\n","D:\\Users\\JGU\\Desktop\\PROYECTOS\\izily_test\\src\\components\\Cards.js",[],"D:\\Users\\JGU\\Desktop\\PROYECTOS\\izily_test\\src\\containers\\Profesores.js",["37"],"/////// COMPONENTE PROFESORES: Genera todos los componentes independientes (cartas)\r\n\r\n// Se debe importar tanto react como los hooks useEffect y useState\r\n// También componentes de Material UI\r\n// Y la constante db que tiene la data de la base de datos de firestore\r\n\r\nimport React, { useEffect, useState } from \"react\";\r\nimport clsx from \"clsx\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport { Grid, IconButton, Toolbar } from \"@material-ui/core\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Profesor from \"../components/Profesor\";\r\nimport { db } from \"../firebase\";\r\n\r\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Visibility from \"@material-ui/icons/Visibility\";\r\n\r\n// Constantes y estilos de Material UI\r\n\r\nconst drawerWidth = 300;\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  content: {\r\n    paddingTop: 64,\r\n    display: \"flex\",\r\n    position: \"absolute\",\r\n    height: \"100%\",\r\n    width: \"100%\",\r\n    flexDirection: \"row\",\r\n  },\r\n  drawer: {\r\n    width: drawerWidth,\r\n  },\r\n  main: {\r\n    background: \"gray\",\r\n    overflow: \"auto\",\r\n    height: \"100%\",\r\n    flexGrow: 1,\r\n    padding: 25,\r\n  },\r\n}));\r\n\r\n// Componente Profesores\r\n\r\nexport default function Profesores() {\r\n  // Cargar los estilos de Material UI como clase\r\n\r\n  const classes = useStyles();\r\n\r\n  // se definen los estados con el hook useState\r\n  // useState sirve para hacer que un componente cambie a lo largo del tiempo\r\n\r\n  // se define el estado de toda la información de los profesores en un arreglo\r\n  //profesores indica el estado, guardarProfesores indica el cambio de estado\r\n\r\n  const [profesores, guardarProfesores] = useState([]);\r\n\r\n  //se define el estado de profesoresFiltrados que es un arreglo con los profesores después de pasar una función que los filtre según lo que escribimos, profesoresFitrados es el estado inicial, guardarProfesoresFiltrados indica el cambio de estado\r\n\r\n  const [profesoresFiltrados, guardarProfesoresFiltrados] = useState([]);\r\n\r\n  // Función para obtener los datos de la db\r\n\r\n  const [especialidades, guardarEspecialidades] = useState([]);\r\n\r\n  const getData = () => {\r\n    //se define una constante usuariosref que almacena los datos de la db\r\n    const usuariosRef = db.collection(\"usuarios\");\r\n\r\n    //En la db de la colección \"usuarios\" existe un booleano que indica si son profesores o no, primero se usa el método where para filtrar si esProfesor está activado como true, si es así pide los datos (get()), LUEGO hace una función a la que le pasa un parámetro llamado querySnapshot que es como una \"foto\" de los datos de la db (cosas de Firebase), la función genera un arreglo vacío llamado docs y con un bucle almacena los datos completos solo de los que pasaron el filtro y les suma su id (por defecto Firebase no trae el id pero es necesario por eso los incluímos), luego ejecuta la función de guardarProfesores guardando el arreglo docs\r\n\r\n    //esa nomenclatura es equivalente a colocar usuariosRef.where(...).get().then(...)\r\n\r\n    usuariosRef\r\n      .where(\"esProfesor\", \"==\", true)\r\n      .get()\r\n      .then((querySnapshot) => {\r\n        const docs = [];\r\n        querySnapshot.forEach((doc) => {\r\n          docs.push({ ...doc.data(), id: doc.id });\r\n        });\r\n        guardarProfesores(docs);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      })\r\n      // al trabajar con promesas (then) es buena práctica colocar un .catch que te muestra un error si es que lo hubiera, se coloca de esta forma:\r\n  };\r\n\r\n  const todasEspecialidades = db.collection(\"especialidades\");\r\n  todasEspecialidades.get().then((querySnapshot) => {\r\n    const especialidades = [];\r\n    querySnapshot.forEach((doc) => {\r\n      especialidades.push({ ...doc.data(), id: doc.id });\r\n    });\r\n    guardarEspecialidades(especialidades);\r\n  });\r\n\r\n  //useEffect es otro hook de React igual que useState, pero este sirve para hacer algo cuando algo sucede, en este caso usamos el hook para que ocurra la función getData() cada vez que se actualice la página, eso permite que al agregar más usuarios a la db, se puedan ver al actualizar\r\n\r\n  //el devolver ese arreglo vacío [] indica que el suceso esperado es la carga de la Página\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, []);\r\n\r\n  //Similar al caso anterior, este hook espera que el ESTADO PROFESORES (que definimos arriba en useState) CAMBIE, por eso está dentro del [], en el [] va lo que se espera que suceda, en este caso es el cambio del estado. Lo que ocurre al cambiar el estado es que se agregan los nuevos datos a PROFESORES\r\n\r\n  useEffect(() => {\r\n    guardarProfesoresFiltrados(profesores);\r\n  }, [profesores]);\r\n\r\n  //Se define filtrarProfesores como función de envento (recibe una \"e\" de evento). Esta función devento ocurre cuando el input (búsqueda), vaya cambiando. lo que hace esta función es que genera una constante llamada terminoDeBusqueda que toma el valor del evento que sería el llenado de datos (e.currentTarget.value significa que está tomando el valor de lo que se va escribiendo en el input) y lo convierte a minúsculas, por si escribes algún nombre en mayúsculas (JS puro y duro). Luego genera un arreglo nuevo arreglo nuevosProfesoresFiltrados que toma una copia del ESTADO de PROFESORES (recordar que el estado ya cambió y tiene toda la data) y los filtra con el método filter, el cual recibe una función que convierte todos los NOMBRES de los profesores también a minúscula, devolviendo solo los que contengan terminoDeBusqueda que sería lo que están escribiendo en el input. Finalmente cambia el estado de profesores colocando solo los nuevos profesores filtrados\r\n\r\n  const filtrarProfesores = (e) => {\r\n    const terminoDeBusqueda = e.currentTarget.value.toLowerCase();\r\n    const nuevosProfesoresFiltrados = profesores.filter((profesor) => {\r\n      const nombreProfesor = profesor.nombre.toLowerCase();\r\n      return nombreProfesor.includes(terminoDeBusqueda);\r\n    });\r\n    guardarProfesoresFiltrados(nuevosProfesoresFiltrados);\r\n  };\r\n\r\n  //Filtrado por etiquetas\r\n\r\n  const filtrarEtiquetas = (e) => {\r\n    const cursosDelProfesor = profesores.map((profesor) => {\r\n      if (profesor.cursos.map((curso) => {\r\n        return curso.nombre;\r\n      }).includes('matemática')){return profesor.nombre};\r\n    });\r\n    console.log(cursosDelProfesor)\r\n    // if (cursosDelProfesor.some(e => e.nombre === cursoBoton)){\r\n    //   console.log(cursoBoton); //espero el nombre del curso que sale en la etiqueta\r\n    //   console.log('existe'); //espero arreglo con los cursos del profesor\r\n    // }\r\n\r\n    // const filtradosPorEtiquetas = cursosDelProfesor.includes(cursoBoton);\r\n    // guardarProfesoresFiltrados(filtradosPorEtiquetas);\r\n  }\r\n\r\n  //Se definen las materias solo para colocar a la izquierda, aún no son las existentes\r\n\r\n  // const materias = [\r\n  //   {\r\n  //     id: \"MAT-125\",\r\n  //     nombre: \"Aritmetica\",\r\n  //   },\r\n  //   {\r\n  //     id: \"MAT-126\",\r\n  //     nombre: \"Algebra\",\r\n  //   },\r\n  //   {\r\n  //     id: \"MAT-126\",\r\n  //     nombre: \"Geometria\",\r\n  //   },\r\n  // ];\r\n\r\n  //Finalmente se muestra el JSX que devuelve nuestro componente Profesores\r\n  //Devuelve el header, las etiquetas y las cards de los profesores, que a su vez son componentes (Profesor.js)\r\n  \r\n  // profesores = [\r\n  //   {\r\n  //     nombre: \"Juan\",\r\n  //     descripción: \"Soy Juan\",\r\n  //     disponible: True,\r\n  //     email: \"soyjuan@gmail.com\",\r\n  //     cursos: [\r\n  //       {\r\n  //         nombre:'matemática',\r\n  //         id:'CUR_001',\r\n  //         slug:'mat'\r\n  //       },\r\n  //       {\r\n  //         nombre:'física',\r\n  //         id:'CUR_002',\r\n  //         slug:'fis'\r\n  //       }\r\n  //     ]\r\n  //   }\r\n  // ]\r\n\r\n  return (\r\n    //Header con cosas raras de MaterialUI\r\n\r\n    <div className={classes.root}>\r\n      <AppBar position=\"absolute\" className={classes.appBar}>\r\n        <Toolbar>\r\n          <IconButton\r\n            edge=\"start\"\r\n            className={classes.menuButton}\r\n            color=\"inherit\"\r\n            aria-label=\"menu\"\r\n          ></IconButton>\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            Profesores\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <div className={classes.content}>\r\n        <div className={classes.drawer}>\r\n          <List>\r\n            <ListItem>\r\n              <FormControl\r\n                className={clsx(classes.margin, classes.textField)}\r\n                variant=\"outlined\"\r\n              >\r\n                {/* El input donde el evento onChange llamará a la función de evento filtrarProfesores */}\r\n                <InputLabel htmlFor=\"outlined-adornment-password\">\r\n                  Buscar profesores\r\n                </InputLabel>\r\n                <OutlinedInput\r\n                  id=\"outlined-adornment-password\"\r\n                  type=\"text\"\r\n                  onChange={filtrarProfesores}\r\n                  endAdornment={\r\n                    <InputAdornment position=\"end\">\r\n                      <IconButton\r\n                        aria-label=\"toggle password visibility\"\r\n                        onClick={() => {}}\r\n                        onMouseDown={() => {}}\r\n                        edge=\"end\"\r\n                      >\r\n                        <Visibility />\r\n                      </IconButton>\r\n                    </InputAdornment>\r\n                  }\r\n                  labelWidth={130}\r\n                />\r\n              </FormControl>\r\n            </ListItem>\r\n            {/* Se coloca un bucle que devuelve los elementos de la lista izquierda y va generando uno por uno */}\r\n            {especialidades.map((especialidad, index) => (\r\n              <ListItem tItem button onClick={filtrarEtiquetas} key={especialidad.id}>\r\n                <ListItemText primary={especialidad.nombre} />\r\n              </ListItem>\r\n            ))}\r\n          </List>\r\n        </div>\r\n        <main className={classes.main}>\r\n          <Grid container spacing={3}>\r\n            {/* Se coloca un bucle que regresa el componente Profesor todas las veces que diga nuestro ESTADO profesor, recordar que ya pasó por el filtro */}\r\n            {profesoresFiltrados.map((profesor) => (\r\n              <Grid item xs={12} md={4} lg={3}>\r\n                <Profesor profesor={profesor} />\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </main>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","D:\\Users\\JGU\\Desktop\\PROYECTOS\\izily_test\\src\\components\\Profesor.js",["38","39","40","41"],"\r\n//Este componente es una card sola\r\n\r\nimport React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n//Cosas raras de MUI\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        maxWidth: 345,\r\n    },\r\n    avatar: {\r\n        height: 80,\r\n        width: 80,\r\n        borderRadius: '50%',\r\n        border: '2px solid #2e2e2e',\r\n    },\r\n    avatarContainer: {\r\n        textAlign: 'center',\r\n        marginBottom: 15,\r\n    }\r\n});\r\n\r\n//Devuelve el componente Profesor al cual se le entregarán datos (props) que en este caso sería el estado de PROFESOR\r\n\r\nexport default function Profesor({ profesor }) {\r\n    const classes = useStyles();\r\n    //imagen random\r\n    const defaultAvatar = 'https://i.pravatar.cc/300';\r\n    return (\r\n        <Card className={classes.root}>\r\n            <CardActionArea>\r\n                <CardContent>\r\n                    <div className={classes.avatarContainer}>\r\n                        <img className={classes.avatar} src={defaultAvatar} />\r\n                    </div>\r\n                    {/* se muestran datos de ese estado PROFESOR que se le pasó al componente, en este caso name y especialidades que contiene los ID según la db */}\r\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                        {profesor.nombre}\r\n                    </Typography>\r\n                    {profesor.cursos.map((cursos) => (\r\n                        <Typography variant=\"body2\" component=\"p\">\r\n                            {cursos.nombre}\r\n                        </Typography>    \r\n                    ))}\r\n                </CardContent>\r\n            </CardActionArea>\r\n        </Card>\r\n    );\r\n}",{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":3,"column":8,"nodeType":"48","messageId":"49","endLine":3,"endColumn":13},{"ruleId":"50","severity":1,"message":"51","line":137,"column":57,"nodeType":"52","messageId":"53","endLine":137,"endColumn":59},{"ruleId":"46","severity":1,"message":"54","line":8,"column":8,"nodeType":"48","messageId":"49","endLine":8,"endColumn":19},{"ruleId":"46","severity":1,"message":"55","line":10,"column":8,"nodeType":"48","messageId":"49","endLine":10,"endColumn":17},{"ruleId":"46","severity":1,"message":"56","line":11,"column":8,"nodeType":"48","messageId":"49","endLine":11,"endColumn":14},{"ruleId":"57","severity":1,"message":"58","line":43,"column":25,"nodeType":"59","endLine":43,"endColumn":79},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"no-unused-vars","'Cards' is defined but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'CardActions' is defined but never used.","'CardMedia' is defined but never used.","'Button' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]